import 'dart:async';

import 'package:for_each/for_each.dart';
import 'package:test/test.dart';

/*
// ignore: use_function_type_syntax_for_parameters
String Function() capturePrint(void testFn()) => () {
      var log = <String>[];

      var spec = ZoneSpecification(print: (_, __, ___, String msg) {
        // Add to log instead of printing to stdout
        log.add(msg);
      });
      Zone.current.fork(specification: spec).run<void>(testFn);

      return log.join('');
    };
*/

/*
// ignore: use_function_type_syntax_for_parameters
String capturePrint(void testFn()) {
  var log = <String>[];

  var spec = ZoneSpecification(
    print: (_, __, ___, String msg) {
      // Add to log instead of printing to stdout
      log.add(msg);
    },
  );
  Zone.current.fork(specification: spec).run<void>(testFn);

  return log.join('');
}
*/

String capturePrint(void Function() func) {
  final output = <String>[];

  void newPrint(Zone self, ZoneDelegate parent, Zone zone, String message) => output.add(message);
  final zoneSpec = ZoneSpecification(print: newPrint);

  runZoned<void>(
    func,
    zoneSpecification: zoneSpec,
  );

  return output.join('');
}

class ForEachAppTest extends ForEachApp {
  @override
  void exitApp(int exitCode) {}
}

void main() {
  test('Capture output', () {
    final output = <String>[];

    void newPrint(Zone self, ZoneDelegate parent, Zone zone, String message) => output.add(message);

    final zoneSpec = ZoneSpecification(print: newPrint);

    runZoned<void>(() {
      print('test output');
    }, zoneSpecification: zoneSpec);

    expect(output.join(''), 'test output');
  }, skip: true);

  test('Capture output wrapper', () {
    String wrapper(void Function() func) {
      final output = <String>[];

      void newPrint(Zone self, ZoneDelegate parent, Zone zone, String message) => output.add(message);

      final zoneSpec = ZoneSpecification(print: newPrint);

      runZoned<void>(func, zoneSpecification: zoneSpec);

      return output.join('');
    }

    expect(wrapper(() {
      print('test output');
    }), 'test output');
  }, skip: true);

  test('Capture print', () {
    expect(capturePrint(() {
      print('test output');
    }), 'test output');
  }, skip: true);

  test('Capture print from func', () {
    void testFunc() {
      print('test output');
    }

    expect(capturePrint(() {
      testFunc();
    }), 'test output');
  }, skip: true);

  test('Usage output', () {
    final app = ForEachAppTest();

    // expect(capturePrint(() {
    //   app.run();
    // }), app.usage);

    final output = capturePrint(() {
      app.run();
    });

    expect(output, app.usage);
  });
}
